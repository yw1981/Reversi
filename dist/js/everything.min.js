var gameLogic;!function(a){function b(a,b){return angular.equals(a,b)}function c(a){return angular.copy(a)}function d(a){return""===a.board[a.row][a.col]?!0:!1}function e(a,b,c,d,e){return b>0&&a[b-1][c]===e&&d.push("V1"),7>b&&a[b+1][c]===e&&d.push("V2"),c>0&&a[b][c-1]===e&&d.push("H1"),7>c&&a[b][c+1]===e&&d.push("H2"),b>0&&c>0&&a[b-1][c-1]===e&&d.push("D1"),b>0&&7>c&&a[b-1][c+1]===e&&d.push("D2"),7>b&&7>c&&a[b+1][c+1]===e&&d.push("D3"),7>b&&c>0&&a[b+1][c-1]===e&&d.push("D4"),d.length?!0:!1}function f(a,b,d,e,f,g){for(var h=0,i=c(a),j=0;j<e.length;j++)switch(e[j]){case"V1":for(var k=-1,l=1,m=b-1;m>=0;m--)if(a[m][d]===f){k=m;break}if(-1===k)break;for(var m=b-1;m>k;m--)if(a[m][d]!==g){l=0;break}if(l){for(var m=b-1;m>k;m--)i[m][d]=f;i[b][d]=f,h++}break;case"V2":for(var k=-1,l=1,m=b+1;p>=m;m++)if(a[m][d]===f){k=m;break}if(-1===k)break;for(var m=b+1;k>m;m++)if(a[m][d]!==g){l=0;break}if(l){for(var m=b+1;k>m;m++)i[m][d]=f;i[b][d]=f,h++}break;case"H1":for(var k=-1,l=1,m=d-1;m>=0;m--)if(a[b][m]===f){k=m;break}if(-1===k)break;for(var m=d-1;m>k;m--)if(a[b][m]!==g){l=0;break}if(l){for(var m=d-1;m>k;m--)i[b][m]=f;i[b][d]=f,h++}break;case"H2":for(var k=-1,l=1,m=d+1;q>=m;m++)if(a[b][m]===f){k=m;break}if(-1===k)break;for(var m=d+1;k>m;m++)if(a[b][m]!==g){l=0;break}if(l){for(var m=d+1;k>m;m++)i[b][m]=f;i[b][d]=f,h++}break;case"D1":for(var n=-1,o=-1,l=1,m=b-1,r=d-1;m>=0&&r>=0;m--,r--)if(a[m][r]===f){n=m,o=r;break}if(-1===n)break;for(var m=b-1,r=d-1;m>n&&r>o;m--,r--)if(a[m][r]!==g){l=0;break}if(l){for(var m=b-1,r=d-1;m>n&&r>o;m--,r--)i[m][r]=f;i[b][d]=f,h++}break;case"D2":for(var n=-1,o=-1,l=1,m=b-1,r=d+1;m>=0&&q>=r;m--,r++)if(a[m][r]===f){n=m,o=r;break}if(-1===n)break;for(var m=b-1,r=d+1;m>n&&o>r;m--,r++)if(a[m][r]!==g){l=0;break}if(l){for(var m=b-1,r=d+1;m>n&&o>r;m--,r++)i[m][r]=f;i[b][d]=f,h++}break;case"D3":for(var n=-1,o=-1,l=1,m=b+1,r=d+1;p>=m&&q>=r;m++,r++)if(a[m][r]===f){n=m,o=r;break}if(-1===n)break;for(var m=b+1,r=d+1;n>m&&o>r;m++,r++)if(a[m][r]!==g){l=0;break}if(l){for(var m=b+1,r=d+1;n>m&&o>r;m++,r++)i[m][r]=f;i[b][d]=f,h++}break;case"D4":for(var n=-1,o=-1,l=1,m=b+1,r=d-1;p>=m&&r>=0;m++,r--)if(a[m][r]===f){n=m,o=r;break}if(-1===n)break;for(var m=b+1,r=d-1;n>m&&r>o;m++,r--)if(a[m][r]!==g){l=0;break}if(l){for(var m=b+1,r=d-1;n>m&&r>o;m++,r--)i[m][r]=f;i[b][d]=f,h++}}return h?{count:h,tempBoard:i,status:!0}:{count:h,status:!1}}function g(a,b,g,j){if(void 0===a&&(a=[["","","","","","","",""],["","","","","","","",""],["","","","","","","",""],["","","","W","B","","",""],["","","","B","W","","",""],["","","","","","","",""],["","","","","","","",""],["","","","","","","",""]]),!d({board:a,row:b,col:g}))throw new Error("One can only make a move in an empty position!");var k=0===j?"W":"B",l=[];if(!e(a,b,g,l,k))throw new Error("One can only make a move next to the opponent's piece!");var m=0===j?"B":"W",n=f(a,b,g,l,m,k);if(!n.status)throw new Error("One must sandwich opponent's pieces on every move!");var o,p=c(a);p[b][g]=0===j?"B":"W";var q=i(n.tempBoard);if(q.status)o={endMatch:{endMatchScores:"B"===q.winner?[1,0]:"W"===q.winner?[0,1]:[0,0]}};else{var r=0==j?"W":"B",s=0==j?"B":"W",t=h(r,s,n.tempBoard);o=t?{setTurn:{turnIndex:1-j}}:{setTurn:{turnIndex:j}}}return[o,{set:{key:"board",value:n.tempBoard}},{set:{key:"delta",value:{row:b,col:g}}}]}function h(a,b,c){for(var g=0,h=0;p>=h;h++){for(var i=0;q>=i;i++)if(d({board:c,row:h,col:i})){var j=[];if(e(c,h,i,j,b)){var k=f(c,h,i,j,a,b);if(k.status&&k.count){g=1;break}}}if(g)break}return g?!0:!1}function i(a){for(var b,c=0,d=0;p>=d;d++)for(var e=0;q>=e;e++)""===a[d][e]&&c++;return c&&(h("W","B",a)||h("B","W",a))?{status:!1}:(b=j(a),{winner:b,status:!0})}function j(a){for(var b=0,c=0,d=0;p>=d;d++)for(var e=0;q>=e;e++)"W"===a[d][e]?b++:"B"===a[d][e]&&c++;return b>c?"W":c>b?"B":"T"}function k(a){var c=a.turnIndexBeforeMove,d=a.stateBeforeMove,e=d.board,f=a.move;try{var h=f[2].set.value.row,i=f[2].set.value.col,j=g(e,h,i,c);if(!b(f,j))return!1}catch(k){return!1}return!0}function l(a,b,c){for(var d,e,f=b,h=a,i=0;i<c.length;i++){var j=c[i];d=g(f.board,j.row,j.col,h);var k={board:d[1].set.value,delta:d[2].set.value};e={stateBeforeMove:f,stateAfterMove:k,turnIndexBeforeMove:h,turnIndexAfterMove:d[0].setTurn.turnIndex,comment:{en:j.comment},move:d},h=d[0].setTurn.turnIndex,f=k}return e}function m(){return l(0,{board:[["","","B","W","W","W","",""],["","","B","B","W","W","",""],["W","W","B","W","W","W","B","B"],["W","B","W","W","B","W","B","B"],["W","W","B","W","B","B","B","B"],["W","W","W","B","W","B","W","W"],["","","W","W","B","B","",""],["","","W","B","B","B","",""]],delta:{row:2,col:0}},[{row:0,col:6,comment:"Black plays on square (0,6)"},{row:0,col:1,comment:"White plays on square (0,1)"},{row:7,col:1,comment:"Black plays row 7, col 1"},{row:6,col:6,comment:"Uh oh, white plays in x-Square"},{row:7,col:7,comment:"Black captures bottom-left corner!"},{row:6,col:7,comment:"White plays (6,7)"}])}function n(){return[l(1,{board:[["","","B","W","W","W","B",""],["","B","B","B","W","W","W",""],["W","W","B","W","W","W","B","B"],["W","B","W","W","B","W","B","B"],["W","W","B","W","B","B","B","B"],["W","W","W","B","W","B","W","W"],["","","W","W","B","B","",""],["","","W","B","B","B","",""]],delta:{row:2,col:0}},[{row:0,col:0,comment:"Where should White play to get an advantage on his next turn?"},{row:6,col:6,comment:"Black plays row 6, col 6"},{row:7,col:7,comment:"White captures diagonal!"}]),l(0,{board:[["","B","B","B","B","B","B",""],["","","B","B","W","W","",""],["W","W","B","W","W","W","B","B"],["W","B","W","W","B","W","B","B"],["W","W","B","W","B","B","B","B"],["W","W","W","B","W","B","W","W"],["","","W","W","B","B","",""],["","","B","B","B","B","B",""]],delta:{row:3,col:0}},[{row:7,col:1,comment:"Where should Black play to not give White an advantage on his next turn?"},{row:1,col:7,comment:"White in (1,7)"}])]}function o(a,b){for(var c=[],d=0;8>d;d++)for(var e=0;8>e;e++)try{c.push(g(a,d,e,b))}catch(f){}var h=c[Math.floor(Math.random()*c.length)];return h}var p=7,q=7;a.createMove=g,a.isMoveOk=k,a.exampleGame=m,a.riddles=n,a.createComputerMove=o}(gameLogic||(gameLogic={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).factory("gameLogic",function(){return{createMove:gameLogic.createMove,isMoveOk:gameLogic.isMoveOk,exampleGame:gameLogic.exampleGame,riddles:gameLogic.riddles,createComputerMove:gameLogic.createComputerMove}});var game;!function(a){function b(b,d,f){function g(){return{width:o.clientWidth/a.colsNum,height:o.clientHeight/a.rowsNum}}function h(a,b){var c=g();return{top:a*c.height,left:b*c.width}}function i(a,b){var c=g();return{x:(b*c.width+c.width/2).toString(),y:(a*c.height+c.height/2).toString()}}var j=document.getElementById("draggingLines"),k=document.getElementById("horizontalDraggingLine"),m=document.getElementById("verticalDraggingLine"),n=document.getElementById("clickToDragPiece"),o=document.getElementById("gameArea"),p=d-o.offsetLeft,q=f-o.offsetTop;if(!l||0>p||0>q||p>=o.clientWidth||q>=o.clientHeight)return n.style.display="none",void(j.style.display="none");var r=Math.floor(a.colsNum*p/o.clientWidth),s=Math.floor(a.rowsNum*q/o.clientHeight);e(s,r)?(n.style.display="inline",j.style.display="inline",k.style.stroke="green",m.style.stroke="green"):(n.style.display="none",j.style.display="inline",k.style.stroke="red",m.style.stroke="red");var t=i(s,r);m.setAttribute("x1",t.x),m.setAttribute("x2",t.x),k.setAttribute("y1",t.y),k.setAttribute("y2",t.y);var u=h(s,r);n.style.left=u.left+"px",n.style.top=u.top+"px",("touchend"===b||"touchcancel"===b||"touchleave"===b||"mouseup"===b)&&(n.style.display="none",j.style.display="none",c(s,r))}function c(a,b){if(l)try{var c=gameLogic.createMove(i,a,b,k);l=!1,gameService.makeMove(c)}catch(d){return void log.info(["wrong move",a,b])}}function d(a){for(var b=[],c=0;a>c;c++)b.push(c);return b}function e(a,b){try{return gameLogic.createMove(i,a,b,k),!0}catch(c){return!1}}function f(){gameService.makeMove(gameLogic.createComputerMove(i,k))}function g(a){i=a.stateAfterMove.board,j=a.stateAfterMove.delta,void 0===i&&(i=[["","","","","","","",""],["","","","","","","",""],["","","","","","","",""],["","","","W","B","","",""],["","","","B","W","","",""],["","","","","","","",""],["","","","","","","",""],["","","","","","","",""]]),l=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,k=a.turnIndexAfterMove,l&&""===a.playersInfo[a.yourPlayerIndex].playerId&&(log.info("set isYourTurn to false in update UI"),l=!1,$timeout(f,1e3))}function h(){dragAndDropService.addDragListener("gameArea",b),resizeGameAreaService.setWidthToHeight(1),g({stateAfterMove:{},turnIndexAfterMove:0,yourPlayerIndex:-2}),gameService.setGame({gameDeveloperEmail:"yw1981@nyu.edu",minNumberOfPlayers:2,maxNumberOfPlayers:2,exampleGame:gameLogic.exampleGame(),riddles:gameLogic.riddles(),isMoveOk:gameLogic.isMoveOk,updateUI:g})}a.rowsNum=8,a.colsNum=8;var i,j,k,l=!1;a.getPreviewSrc=function(){return 1===k?"res/pieceWhite.png":"res/pieceBlack.png"},a.shouldSlowlyAppear=function(a,b){return void 0!==j&&j.row===a&&j.col===b},a.isWhite=function(a,b){return"W"===i[a][b]?!0:!1},a.isBlack=function(a,b){return"B"===i[a][b]?!0:!1},a.oddSum=function(a,b){return(a+b)%2!==0?!0:!1},a.evenSum=function(a,b){return(a+b)%2===0?!0:!1},a.rows=d(a.rowsNum),a.cols=d(a.colsNum),a.init=h}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run(function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_REVERSI:"Rules of Reversi",RULES_SLIDE1:"Game is on an 8Ã—8 uncheckered board.There are sixty-four identical game pieces called disks,which are light on one side and dark on the other.",RULES_SLIDE2:"During a play, any disks of the opponent's color that are in a straight line and bounded by the disk just placed and another disk of the current player's color are turned over to the current player's color.",RULES_SLIDE3:"It's not legal to put a piece on a spot that would not result any piece color change.",RULES_SLIDE4:"The object of the game is to have the majority of disks turned to display your color when the last playable empty square is filled. The player has more piece in the board win the game.",CLOSE:"Close"}),game.init()});
//# sourceMappingURL=everything.min.js.map